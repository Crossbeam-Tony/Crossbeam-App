## Summary of the Current Comment System Implementation

This document provides an overview of how the commenting feature is currently implemented in the Flutter application. The system is a mock-up using local, in-memory data and is not connected to a persistent backend.

### 1. Data Source and Model
- **Data Storage**: Comments are stored as a `List<Map<String, dynamic>>` directly within the `Project` model object.
- **Persistence**: There is no persistence layer. The comment data is loaded from a local, hardcoded file (`lib/data/dummy_projects.dart`) when the app starts. Any new comments added during a session are lost when the app is closed.
- **Mutability Issue**: The `comments` list was initially unmodifiable, causing crashes when new comments were added. This has been partially worked around by creating new `Project` instances, but the root data source remains static.

### 2. User Interface (UI)
The app has two separate and disconnected UIs for handling comments:

**A. Project Card Overlay (`lib/modules/projects/projects_page.dart`)**
- **Display**: When a project card is swiped, an overlay appears showing a short list of "recent comments" read from the project's local `comments` list.
- **Input**: This overlay contains a compact comment input field. When tapped, it expands to cover the recent comments list, allowing the user to type a longer message.
- **Adding Comments**: When a comment is submitted from this expanded view, the `_addCommentToProject` method:
    1. Creates a new comment map.
    2. Creates a *new* `Project` object with the new comment added to its list.
    3. Updates the local `_projects` list within the `ProjectsPage` state.
    4. **This change is only in the local state and is not saved anywhere.**

**B. "View All" Comments Page (`lib/screens/project_comments_page.dart`)**
- **Navigation**: This page is intended to be reached by tapping a "View All" button.
- **Disconnected State**: This screen manages its own list of comments in its state. It is not connected to the `Project` model's comment list.
- **Functionality**: Comments added on this page are only visible here and do not appear on the project card overlay, and vice-versa.

### 3. Backend-as-a-Service (BaaS) Integration (In Progress)
- **Supabase Setup**: The `supabase_flutter` SDK has been added to the project and is initialized at startup.
- **New Components**:
    - `lib/services/comment_service.dart`: A service has been created to handle fetching and adding comments to a Supabase backend.
    - `lib/widgets/comments_widget.dart`: A new, self-contained widget has been built to display a list of comments and provide an input field, using the `CommentService`.
    - `lib/pages/comment_page.dart`: A new page has been created to host the `CommentsWidget`.
- **Current Status**: **These new BaaS components are not yet integrated into the main application.** The UI still uses the original mock data and local state management described above.

### Summary of Issues & Next Steps
- The current system is a non-functional mock-up.
- Data is not persisted.
- The UI is fragmented and state is not shared.
- The next logical step is to replace the mock UIs with the new `CommentsWidget` and connect the app to Supabase via the `CommentService`. 